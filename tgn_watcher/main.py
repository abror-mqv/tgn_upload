import asyncio
import os
from telethon import TelegramClient, events
from dotenv import load_dotenv
from parser import parse_message
from sender import send_to_backend, get_prediction

load_dotenv()

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
session_name = os.getenv("SESSION_NAME")
groups = [x.strip() for x in os.getenv("GROUPS").split(",")]

print(f"üîπ API_ID: {api_id}, SESSION_NAME: {session_name}")
print(f"üîπ –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –≥—Ä—É–ø–ø—ã: {groups}")

client = TelegramClient(session_name, api_id, api_hash)


@client.on(events.NewMessage(chats=groups))
async def handler(event):
    message = event.message
    print(f"\nüì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {event.chat_id} –æ—Ç {message.sender_id}")
    
    ad = parse_message(message)
    if not ad:
        print("‚ö™ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return

    print("üü¢ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:", ad)
    images = []
    gid = getattr(message, "grouped_id", None)
    if gid:
        print(f"üñº –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞ {gid}")
        msgs = await client.get_messages(event.chat_id, limit=20)
        same = [m for m in msgs if getattr(m, "grouped_id", None) == gid]
        same.sort(key=lambda m: m.id)
        for m in same:
            is_img = bool(getattr(m, "photo", None)) or (
                getattr(m, "document", None) and getattr(m.document, "mime_type", "").startswith("image/")
            )
            if is_img:
                print(f"üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {m.id}...")
                b = await m.download_media(file=bytes)
                if b:
                    images.append(b)
    else:
        is_img = bool(getattr(message, "photo", None)) or (
            getattr(message, "document", None) and getattr(message.document, "mime_type", "").startswith("image/")
        )
        if is_img:
            print("üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            b = await message.download_media(file=bytes)
            if b:
                images.append(b)
    
    if images:
        print(f"üñº –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        ad["images"] = images
    else:
        print("‚ö™ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç")

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    print("üîπ –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
    try:
        category, confidence = await get_prediction(ad["description"])
        ad["category"] = category
        ad["confidence"] = confidence
        print(f"üß† –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {category} ({confidence:.2f})")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:", e)
        ad["category"] = None
        ad["confidence"] = None

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –±—ç–∫–µ–Ω–¥
    try:
        await send_to_backend(ad)
        print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –±—ç–∫–µ–Ω–¥")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –±—ç–∫–µ–Ω–¥:", e)


async def main():
    print("üöÄ Watcher –∑–∞–ø—É—â–µ–Ω. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
    await client.start()
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram")
    await client.run_until_disconnected()


if __name__ == "__main__":
    asyncio.run(main())
